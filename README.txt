XXLMath - это библиотека для работы с числами, в десятичной записи которых используется около 1 млрд. символов. Ограничение связано с максимальной длиной строки. Теоретически. На практике большинство функций библиотеки заметно тратят ресурсы компьютера при гораздо меньшем числе символов.


Подключение библиотеки:
<head>
	...
	<script src = 'XXLMath.js'></script>
	...
</head>



Создание объекта большого числа:
var a = new XXLNumber(value_, usedNotation_, name_);
Все аргументы не обязательны.

Пока что библиотека работает только для десятичной системы счисления.

Прототип объекта большого числа и функция-конструктор не готовы. Поэтому некоторые свойства следует присвоить вручную. Например:

var a = new XXLNumber(value_, usedNotation_, name_);
a._integer = [4,5];
a._fraction = [6,7,8];
a._isNegative = false;
a._isZero = false;

var b = new XXLNumber();
b._integer = [4,6,7,8,9];
b._fraction = [4,5,6,7,9];
b._isNegative = false;
b._isZero = false;

Здесь свойства _integer и _fraction — соответственно целая и дробная части числа. Записываются они в виде массива чисел от 0 до 9. То есть, число 45.678 записывается так, как указано в примере выше для числа а. Свойства _isNegative и _isZero  являются логическими значениями.



Операции с объектами больших чисел:
var c = XXLMath.multiply(x, y, precision_, usedNotation_);
Аргументы precision_ и usedNotation_ являются необязательными.

precision_ по умолчанию равно 10 (для функции incompleteQuotient - 0). Это означает, что число знаков в дробной части  числа не более 10. Для функций, у которых не указано значение по умолчанию, округление производится только, если указана точность. Для остальных функций округление производится в любом случае. Точность может быть записана в экспоненциальной форме. В этом случае округление производится до десятков, сотен, тысяч и т.д.

Все функции кроме compare возвращают объект большого числа.

Доступны следующие функции:

1. compare(x, y) — сравнение чисел x и y (при x > y возвращается 1; при x < y — возвращается -1 ; при x = y возвращается 0);

2. sum(x, y, precision_, usedNotation_) - сложение (x+y);

3. subtract(x, y, precision_, usedNotation_) - вычитание (x-y);

4. multiply(x, y, precision_, usedNotation_) - умножение (x*y);

5. divide(x, y, precision_ = 10, usedNotation_) - деление (x/y);

6. incompleteQuotient(x, y, precision_ = 0, usedNotation_) - целочисленное деление (x/y) (нахождение неполного частного);

7. remainder(x, y, precision_ = 10, usedNotation_) - взятие остатка от деления (x/y);

8. pow(x, y, precision_, usedNotation_) - возведение в степень (x**y);

9. root(x, y, precision_ = 10, usedNotation_) - извлечение корня (степени y из числа x);

Функции root и pow не завершены. Работают на данный момент только для целых положительных показателей степеней. Вместо pow следует пока что использовать вспомогательную функцию _toThePowerOfInteger(x, y).


